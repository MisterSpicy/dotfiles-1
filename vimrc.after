
" doesn't send escape). filereadable() is necessary for Leopard were 'mac'
" is no longer set on the console.
if has('mac')
  inoremap <Char-0xa0> <Space>
endif

" Additional NerdTree Shortcut
nnoremap <F2> :NERDTreeToggle<CR>

" GUndo Shortcuts
map <Leader>u :GundoToggle<CR>
nnoremap <F5> :GundoToggle<CR>

" Move selected Text up/down
function! MoveLineUp()
  call MoveLineOrVisualUp(".", "")
endfunction

function! MoveLineDown()
  call MoveLineOrVisualDown(".", "")
endfunction

function! MoveVisualUp()
  call MoveLineOrVisualUp("'<", "'<,'>")
  normal gv
endfunction

function! MoveVisualDown()
  call MoveLineOrVisualDown("'>", "'<,'>")
  normal gv
endfunction

function! MoveLineOrVisualUp(line_getter, range)
  let l_num = line(a:line_getter)
  if l_num - v:count1 - 1 < 0
    let move_arg = "0"
  else
    let move_arg = a:line_getter." -".(v:count1 + 1)
  endif
  call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
endfunction

function! MoveLineOrVisualDown(line_getter, range)
  let l_num = line(a:line_getter)
  if l_num + v:count1 > line("$")
    let move_arg = "$"
  else
    let move_arg = a:line_getter." +".v:count1
  endif
  call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
endfunction

function! MoveLineOrVisualUpOrDown(move_arg)
  let col_num = virtcol(".")
  execute "silent! ".a:move_arg
  execute "normal! ".col_num."|"
endfunction

nnoremap <silent> <C-Up> :<C-u>call MoveLineUp()<CR>
nnoremap <silent> <C-Down> :<C-u>call MoveLineDown()<CR>
inoremap <silent> <C-Up> <C-o>:<C-u>call MoveLineUp()<CR>
inoremap <silent> <C-Down> <C-o>:<C-u>call MoveLineDown()<CR>
vnoremap <silent> <C-Up> :<C-u>call MoveVisualUp()<CR>
vnoremap <silent> <C-Down> :<C-u>call MoveVisualDown()<CR>

" Include user's machine dependend vim config
if filereadable(expand("~/.vimrc.machine"))
  source ~/.vimrc.machine
endif

" Delete fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

" god should get ruby syntax highlight
au BufNewFile,BufRead *.god set filetype=ruby
" json builder is ruby code
au BufNewFile,BufRead *.jbuilder set filetype=ruby

" syntax highlight for javascript modules
au BufNewFile,BufRead *.jsm set filetype=javascript

" Escape unselects search selection
nnoremap <esc> :noh<return><esc>

" ingore doc-dir for command-t
set wildignore+=doc/*

" Powerline Plugin should use fancy symbols
let g:Powerline_symbols = 'fancy'

" Tagbar Plugin
let g:tagbar_autoclose=1
let g:tagbar_autofocus=1
let g:tagbar_iconchars = ['▾', '▸']

" CtrlP
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$',
    \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
    \ 'doc': 'doc$'
    \ }

let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 0

let g:tagbar_type_ruby = {
    \ 'ctagstype' : 'Ruby',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 'f:methods',
        \ 'm:modules',
        \ 'F:singleton methods',
        \ 'd:rspec describe',
        \ 'C:rspec context',
        \ 't:unit test'
    \ ]
\ }


if has("gui_macvim")
    let macvim_hig_shift_movement = 1
endi

" Spell checker for markdown files
au BufEnter *.md  set spell spelllang=en_us
